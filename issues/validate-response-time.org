# -*- mode: org; mode: auto-fill; fill-column: 80 -*-

#+TITLE: Validate Response Times
#+OPTIONS:   d:t
#+LINK_UP:  ./
#+LINK_HOME: ../

* Issue

  FBuddy doesn't currently validate incoming responses as much as it could.
  Specifically, we could defend against [[https://en.wikipedia.org/wiki/Replay_attack][replay attacks]] by rejecting old data and
  future data.  Troublingly, since request times are completely independent of
  one another (one communication method could take seconds while the other could
  take weeks), the service could accidentally replay itself.  We should fix
  that.

  In the current state, every time we send an [[file:../src/santiago.py::def%20outgoing_request(self,%20from_,%20to,%20host,%20client,][outgoing request]], we store the
  service and the host it was requested from:

  #+begin_src python
    def outgoing_request(self, from_, to, host, client,
                         service, locations="", reply_to=""):
        # ...
        self.requests[host].add(service)
  #+end_src

  We reject all responses that aren't on that queue:

  #+begin_src python
    def handle_reply(self, from_, to, host, client,
                     service, locations, reply_to,
                     request_version, reply_versions):
        # ...
        try:
            if service not in self.requests[host]:
                # ...
                return
        except KeyError:
            # ...
            return
  #+end_src

  This feels insufficient to me.  It would be simple to add request IDs to each
  outgoing and incoming request.  If the host replies with something other than
  the client's outgoing request ID, the reply is rejected.

  However, I can't tell whether that's necessary or appropriate.

* Fixes [3/4]

** DONE Track response time
   CLOSED: [2013-07-20 Sat 17:06]

   - Responses to later requests supercede any responses to previous requests.

   - The most recent response from each request supercedes any previous response
     for that request.

   - This must be stored per service from each host.  That's the only way we'll
     know we're processing the most updated reply, even across restarts.  Stupid
     more data points.

   - This system creates one particular assumption: that the response creation
     time can be the service response time.  Each response applies to a specific
     service and includes the response's sent-time.  The sent-time is not the
     service's last update time.  Why use the sent-time instead of the last
     update time?  This way, only the recipient (client) needs to keep track of
     the data.
     
     I prefer storing response send-times on the client because I assume that if
     the client falls (is compromised), that "last update" times (that could be
     highly correlated between clients) are more damaging to the server than
     "last message" times.

** DONE Data Structure Changes
   CLOSED: [2013-07-20 Sat 17:07]

   Each communication (request and response or just response?) needs to include
   its creation/sent time.

   Each service needs to store a sent-time time that can't be directly updated
   by the server (the client must reject that key if it's submitted, it can be
   set only as a side-effect of the reply itself).

** TODO Make Reject Time Key Tests

   If the server submits a response-sent-time-update message for a particular
   service, the client must reject it and not store or update its data store.
   Otherwise, we're right back in the replay-attack place we tried to get out
   of:

   - t+0 :: Server submits service, message is logged.
   - t+1 :: Server updates service to a new state.
   - t+2 :: Attacker submits message to roll back the request clock to t-1.
   - t+3 :: Attacker resubmits t+0 request, rolling back the service.

   If this attack fails (service is at state t+1, and is not at state t+0), we
   know the service is implemented correctly.

** DONE Increment protocol version.
   CLOSED: [2013-07-20 Sat 17:07]

   I'll need to bump the protocol version to version 2.  Version 2 is not
   backwards compatible [fn:1].

** Tests [0/9]

*** TODO Replies are version 2.                               :communication:

    - [[*Increment%20protocol%20version.][Increment protocol version.]]

*** TODO Version 2 client rejects version 1 replies.          :communication:

    - [[*Increment%20protocol%20version.][Increment protocol version.]]

*** TODO Response send times are recorded correctly.         :infrastructure:

    Once the response is complete, the incoming message's send time is recorded
    as the service's update time.

    - [[*Track%20response%20time][Track response time]]
    - [[*Data%20Structure%20Changes][Data Structure Changes]]

*** TODO Response send times from the past are ignored.                :time:

    If the service has been updated more recently than the message's send time,
    that message must be ignored, its data may not be stored.

    - [[*Track%20response%20time][Track response time]]

*** TODO Response send times equal to the service update time are ignored. :time:

    You can wait a millisecond before sending me another message.

    - [[*Track%20response%20time][Track response time]]

*** TODO Response send times from the future are ignored.              :time:

    If the service was updated in the future, reject the message.  That doesn't
    make sense.  Somebody's clock is way off and we should probably signal the
    system that the server is temporally disturbed.

    - [[*Track%20response%20time][Track response time]]

*** TODO Response send times are stored per service.         :infrastructure:

    I don't care whether there's a "last response time" per server, exactly, I
    care when this particular service was last updated.

    This implies that the FBuddy service's last update is always that of the
    latest update.

    - [[*Data%20Structure%20Changes][Data Structure Changes]]

*** TODO Response send times can't be modified by the server. :infrastructure:

    They can be set, only once, when the message is sent.  The client must treat
    the response send time as metadata and may not accept an response send time
    update as a normal service update.

    For example, if I receive an update to the "wiki" service, I'll store
    [2013-05-06 Mon 17:49] as the update time in the "wiki-update" service.  The
    server then is not allowed to send a time to set the "wiki-update" service,
    specifically.

    - [[*Data%20Structure%20Changes][Data Structure Changes]]

* Rejected Fixes

** Apply most recent response time per ID

   Outstanding Requests:

   #1, sent: 10:30 AM
   #2, sent: 11:53 AM

   Responses to request 1 will be used until a response to request 2 is
   received.

*** Rejection

    Request IDs are meaningless.  The Service itself is what we care about.

** Track response ID

   An ordered set of random numbers.  Sequential in these docs for ease of
   understanding.

*** Rejection

    Request IDs are meaningless.  The Service itself is what we care about.

* Discussion

** [2013-01-12 Sat 09:00] Nick Daly: Necessary and Appropriate?

   How could an attacker fake a reply message?  They'd have to either:

   - Know the host's secret key and intercept the outgoing message, while making
     sure that their reply reached you before the host's reply did.

   - Control the destination server (and implicitly, the secret key), meaning
     that no data from this host should be trusted.

   No additional information I can add to the request will ever fix either of
   those points.  The only way to fix the first issue is to add some out-of-band
   counter negotiation, where the request's reply ID is unpredictable.  However,
   isn't that why we're using PGP in the first place?

** [2013-01-12 Sat 11:00] Nick Daly: Other Uses?

   If we treat this like a timestamp, we can handle out-of-order requests in
   case of service updates.  This might be important, in the likely case that
   one protocol is significantly faster than another, while multiple requests
   are outstanding.  Otherwise, previous responses could overwrite current ones.

   1. I request your wiki service.
   2. You receive the wiki request over protocol 1 and reply by protocol 1.
   3. You update your wiki service.
   4. You receive the wiki request over protocol 2 and reply by protocol 2.
   5. I receive your reply by protocol 2.
   6. I receive your reply by protocol 1.

   Here, there's time-based inconsistency in a single response.  Across
   protocols, we can't assume any request or response order.  A timestamp would
   be appropriate to simplify these concerns, to reject anything older than the
   most recent response.  We'd necessarily pick the most recent timestamp on the
   most recent response ID.

** [2013-01-12 Sat 13:06] Nick Daly: Waitaminute.

   I don't give two flying figs about the request ID.  I only care about the
   response time.  Request IDs (keys) are valuable only when they aren't
   predictable (when they aren't recorded in the outgoing request), which isn't
   the case at this point.

   Also, I only ever care about *the most recent* reply to any response because
   it's, by definition, the most updated answer for that particular service.
   Until they're based on additional out-of-band-verifiable data, Request IDs
   are inherently meaningless and will be faked by any competent attacker, and
   there isn't shit we can do about it because GPG is our defense.

** [2013-01-12 Sat 13:13] Nick Daly: Response IDs as Tracking Tools?

   Is there anything I can gain by tracking the response ID?  I can keep track
   of which responses are outstanding and haven't received responses yet.
   That'll let me dequeue any response using the first protocol that answers.  I
   still don't think that's useful though.  Am I infinitely complicating the
   tool without any useful benefit?  Perhaps.

   Fucknuts.  All responses across all protocols should be submitted and should
   contain the same data.  So, again, only the most recent reply need be
   recorded.  Request IDs add nothing here.

   However, there is still something that I can use, maybe.  There are two
   considerations I have:

   - If I use most recent request, I can't de-queue the outstanding requests,
     ever, unless I say that only one request is ever permitted to be
     outstanding, which is nuts.

   - I can record sent time and reject all responses before the previous sent
     time.  But, the only ones that I really care to reject are the ones sent
     before the first request and before the most recent response.  Again,
     request timing gains me nearly nothing here.

   If I care about only the most recent response, when do I de-queue requests?
   I don't think I can ever forget the most-recent-response time.  Messages
   could come back in any order, at any time, even between service restarts.
   So, I can never forget the most recent response, that has to be stored in the
   data structure, so I know what's the most updated answer.

* Metadata
  :PROPERTIES:
  :Status:   Incomplete
  :Priority: 0
  :Owner:    Nick Daly
  :Description: Add Response-Time to Replies
  :END:


* Footnotes
[fn:1] Yes, version 2 is technically backwards compatible, technologically, if
we assume the response time is "now."  However, that transforms it into a
sillier form of protocol version 1 and does nothing to improve security, since
the latest message is always the most recent message.  That's still vulnerable
to replay attacks, and is thus insecure.

Following Grigg's H3, there is only one mode, and that is secure.  Thus,
versions 1 and 2 are incompatible and any version 2 client must reject messages
from a version 1 server.  However, version 2 clients can still send messages to
version 1 servers, as the additional field will simply be filtered out.  Not
sure if we can encode that nuance.
