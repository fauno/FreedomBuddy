# -*- mode: org; mode: auto-fill; fill-column: 80 -*-

#+TITLE: Add Reasonable Inter-process Communication
#+OPTIONS:   d:t
#+LINK_UP:  ./
#+LINK_HOME: ../

* Issue

  The [[file:../src/connectors/cli/controller.py::#!%20/usr/bin/env%20python%20#%20-*-%20mode:%20python%3B%20mode:%20auto-fill%3B%20fill-column:%2080%3B%20-*-][CLI connector]] just pipes stuff through the HTTPS connector.  That's silly.
  We should make a connector that doesn't rely on another connector.

  - [[http://docs.python.org/howto/sockets.html][socket-based]] connector
  - [[http://docs.python.org/library/pipes.html][pipe-based]] connector

  I'm asking FBuddy to be a daemon and I need to send it input over the CLI.
  Any asynchronous pipe support should do.

** Examples

   We need some way for the user to send commands to FBuddy through the command
   line.

   Arguments:

   - s :: service.  The service to request or host.
   - h :: host.  Identifies the host to request a service from.
   - c :: client.  Host a service for a client.  If this option is specified,
          the locations to serve at must also be specified.

*** Requesting a service

    : fbuddy -h 0x3 -s wiki

    Request the wiki service from the "0x3" host (Dave).

*** Hosting a service

    : fbuddy -c 0x3 -s web 192.168.1.12

    Provide Dave the "web" (proxy) service at 192.168.1.12.  The next time Dave
    asks for a web proxy service, we'll tell him it's at 192.168.1.12.

** Security Hole?

   With a little bit of a stretch, this can be considered a security hole, given
   how the connector currently allows users to specify any address to connect to,
   and the ~httplib.HTTPSConnection~ doesn't validate the certificates.  So, you
   could easily, accidentally, and unknowingly connect to an untrusted server.

   #+begin_src sh
     grep -nH HTTPSConnection ../src/connectors/cli/controller.py
   #+end_src

   #+results:
   | [[../src/connectors/cli/controller.py::174]] |
   | [[../src/connectors/cli/controller.py::181]] |
   | [[../src/connectors/cli/controller.py::202]] |

* Fixes [0/1]

** TODO Convert the [[file:../src/connectors/cli/controller.py][CLI Connector]] to a socket or pipe based system.

*** Pipe System

    Best I can figure, the system will need to communicate with itself through
    two separate entry points.

    - The FBuddy service will hold a reference to the CLI connector.

    - The CLI will pass its data through to the main method via the
      ~if __name__ == "__main__":~ construct.

      That'll send data out to the pipe that the connector is waiting for.

* Discussion

** TODO Does this even have a sender or listener?

   I can understand a monitor, but how does this one communicate?  Intra-machine
   communications, maybe, but they'd be rarely used.  A listener makes sense,
   the monitor will make incoming calls.  A sender doesn't make sense to me,
   though.

   Pick it up [[file:../src/connectors/cli/controller.py::class%20Listener(santiago.SantiagoListener):][here]].

** [2012-10-03 Wed]

   So, I'm playing with simple pipes, and I can get input once.  That's not
   quite enough yet, though.

** [2012-10-04 Thu]

   Learning from =exmachina=, I've decided to just use bjsonrpc.  Unfortunately,
   I'm unable to connect to the socket:

   #+begin_src sh
     $ python clitest.py
     Traceback (most recent call last):
       File "clitest.py", line 127, in <module>
         sock.connect(PIPE)
       File "<string>", line 1, in connect
     socket.error: [Errno 111] Connection refused
   #+end_src

   Don't know why yet, need Internet!  Got as far as investigating
   =/usr/lib/python2.6/socket.py=, but it gets all wonky with:

   #+begin_src python
     _socketmethods = (
         'bind', 'connect', 'connect_ex', 'fileno', 'listen',
         'getpeername', 'getsockname', 'getsockopt', 'setsockopt',
         'sendall', 'setblocking',
         'settimeout', 'gettimeout', 'shutdown')
   #+end_src

   That's almost the only time "listen" occurs in the source.  I assume we're
   calling out to some OS specific C libraries, so it's un- (or ill-) defined,
   here.

** [2012-10-15 Mon]

   Unfortuntately, as I found this weekend, bjsonrpc blocks.  So, my options
   are:

   1. Avoid blocking by spawning off another thread.  That'll need more
      research, as I think I'll have sufficient references between objects to
      ensure addressability, but multi-threaded access to a shared memory state
      terrifies me.  I'd need to implement some sort of locking there, and I
      don't such locking is a language feature, outside of pypy, so I'd be
      rolling my own locking.  Eww.

   2. Use non-blocking IO, possibly through non-blocking sockets.  Yeah, they
      exist well enough, I just need to make sure they pass control back and
      listen for events appropriately.  Not overly difficult to test.

      - http://stackoverflow.com/questions/3591505/how-can-i-organise-program-which-should-have-non-blocking-connection-on-python

      - http://code.activestate.com/recipes/259148-simple-http-server-based-on-asyncoreasynchat/

      - http://code.activestate.com/recipes/440665/

   "If your program is processor bound, then pre-emptive scheduled threads are
   probably what you really need.  Network servers are rarely processor bound,
   however." - As long as I can file requests to a queue, that should also do
   the trick.

   It seems like I could rewrite the sleepy-wait loop I have going on
   in [[file:../src/santiago.py::while%20self.live:][Santiago.__exit__]] with asyncore.loop, which should handle the many
   listeners I need.  It might also be possible to just make all the listeners,
   senders, and monitors inherit from something that handles most of this
   scheduling for me.

   If only [[http://www.python.org/dev/peps/pep-3153/][PEP 3153]] were implemented.  It asks for (but does not seem to
   provide) exactly what I'm looking for, down to "separation between protocol
   and transport."  Expanding on my thoughts in an email to the PEP's author,
   I'm looking to use out-of-the-box protocol-specific servers as clients in a
   non-blocking manner.  That's difficult: when even one server wants to be lazy
   and handle IO in a simpler, blocking, way, it hangs the rest of the servers.
   That's why bjsonrpc won't work.  So, I might need to roll all my own servers,
   which is a terrifying thought.

   I just want servers that listen for input without blocking, unwrap a
   request's data, and pass that data along.  Why is it so annoying to find
   servers that do that job for me, between multiple protocols?

*** [2012-10-15 Mon 11:20]

    Laurens suggests "Twisted without a doubt" for my use case over the next 5
    years.  So, I guess that's my solution.  It may be heavier than I want, but
    at least it'll do the job without a lot of (non-intrinsic) mess.

    http://twistedmatrix.com/

    I don't care much about intrinsic mess, I can hide that for my controllers,
    pretty effectively.


** [2012-12-11 Tue] Allows Externalization

   I again realized last night that this is of a very high priority, as it
   allows any external system to connect to FBUddy, taking the onus off FBuddy
   to supply connectors for every protocol, etc.  This allows us to externalize
   nearly all other details: other protocol's connectors would no longer act in
   concert, but perhaps that's best.  Thankfully, I finally remembered to write
   this down.  Thank Pete for dinner napkins.

* References

  - http://stackoverflow.com/questions/375427/non-blocking-read-on-a-subprocess-pipe-in-python

  - http://ubuntuforums.org/showthread.php?t=1415421

  - http://ubuntuforums.org/showthread.php?t=1241108

  - http://code.activestate.com/recipes/66012/

  - http://pypi.python.org/pypi/python-daemon/1.5.5

  - http://docs.python.org/library/select.html#poll-objects

  - http://code.activestate.com/recipes/576957-asynchronous-subprocess-using-asyncore/

  - http://docs.python.org/library/multiprocessing.html

  - http://www.lysator.liu.se/~bellman/download/asyncproc.py

  - http://stackoverflow.com/questions/12464331/socket-error-errno-111-connection-refused

  - http://stackoverflow.com/questions/3591505/how-can-i-organise-program-which-should-have-non-blocking-connection-on-python

  - http://code.activestate.com/recipes/259148-simple-http-server-based-on-asyncoreasynchat/

  - http://twistedmatrix.com/

* Metadata
  :PROPERTIES:
  :Status:   Incomplete
  :Priority: 0
  :Owner:    Nick Daly
  :Tags:     Security
  :Blocking: [[file:10.org][httplib.HTTPS Connection Insecure]]
  :Description:     Local Interprocess Communication
  :END:
